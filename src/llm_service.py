import fireworks.client
from bs4 import BeautifulSoup

class LLMService:
    """Service for LLM processing."""
    
    @staticmethod
    def process_voice_data(raw_text, html_text, api_key):
        """Process voice transcription with LLM."""
        fireworks.client.api_key = api_key
        
        prompt = f"""
            OpenAI Whisper text transcription: {raw_text}
            You are a medical assistant tasked with processing a text transcription generated by OpenAI Whisper from an audio file (e.g., a doctor-patient conversation or medical notes). Follow these steps:

            1. Refine the Text: (MUST be written)
            Improve the text grammatically and logically for better readability and coherence.
            Do not add any new words, sentences, or information not present in the original input.
            Ensure the refined text retains the original meaning and context.

            2. Extract Patient Features: (MUST be written)
            Extract ONLY -be strict on that- the key features of the patient from the following HTML (html_text) in a structured key-value JSON format:
            {html_text}

            3. Reasoning: (MUST be written)
            write your reasons here.
            
            please be strict to the above structure and write the title before (MUST be written) before any section.

            If a specific feature is not mentioned in the input, assign the value null
            to that key (except ICD10 code).
            make sure the output message to be written with the sentence that have (MUST be written) message and be free in any format.
            Explain your reasoning step by step before providing the answer.
        """

        try:
            response = fireworks.client.Completion.create(
                model="accounts/fireworks/models/deepseek-v3",
                prompt=prompt,
                max_tokens=100000,
                temperature=0.3,
            )
            
            if response.choices and response.choices[0].text.strip():
                return response.choices[0].text.strip()
            else:
                return raw_text
        except Exception as e:
            raise Exception(f"LLM processing failed: {str(e)}")
        

    @staticmethod
    def process_text_data(raw_text, html_text, api_key):
        """Process voice transcription with LLM."""
        fireworks.client.api_key = api_key
        
        prompt = f"""
            1. Fill Patient Features: (MUST be written)  
            - Fill the features in {html_text} using the diagnosis description in {raw_text}.  
            - Assign NULL to any feature not mentioned in {raw_text}.  
            - Add the appropriate ICD-10 code based on the diagnosis.  

            2. Reasoning: (MUST be written)  
            - Explain step-by-step why each feature is filled with the corresponding value.  
            - Include reasoning for assigning NULL values or inferring ICD-10 codes.  

            Strictly follow the structure and ensure the output is clear and concise. 
            (1. Fill Patient Features: (MUST be written) and 2. Reasoning: (MUST be written) must be written in the output)
        """
        
        try:
            response = fireworks.client.Completion.create(
                model="accounts/fireworks/models/deepseek-v3",
                prompt=prompt,
                max_tokens=100000,
                temperature=0.3,
            )
            
            if response.choices and response.choices[0].text.strip():
                return response.choices[0].text.strip()
            else:
                return raw_text
        except Exception as e:
            raise Exception(f"LLM processing failed: {str(e)}")
    
    @staticmethod
    def process_html_data(raw_text, api_key):
        """Process HTML data with LLM."""
        fireworks.client.api_key = api_key
        
        soup = BeautifulSoup(raw_text, "html.parser")
        
        # Remove unnecessary tags
        for tag in soup(["script", "style", "meta", "link", "head"]):
            tag.decompose()
            
        cleaned_html = soup.prettify()
        
        prompt = f"""
            DeepSeek-V3, analyze the provided HTML input (`{cleaned_html}`) which contains clinical sheets.
            Extract all key features related to the patient and structure them into a flat JSON object.
            Ensure the JSON object is non-nested, with keys describing medical features and values as text,
            numbers, or booleans. Exclude any non-medical or irrelevant information.
            Provide the output in a clear and concise format.
        """
        
        try:
            response = fireworks.client.Completion.create(
                model="accounts/fireworks/models/deepseek-v3",
                prompt=prompt,
                max_tokens=100000,
                temperature=0.3,
            )
            
            if response.choices and response.choices[0].text.strip():
                return response.choices[0].text.strip()
            else:
                return "{}"
        except Exception as e:
            raise Exception(f"HTML processing failed: {str(e)}")
